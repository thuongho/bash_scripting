#!/bin/bash
#
# ****** What this program does ******
# This program will search a specified directory for payroll information regarding the
# first half of 2004 and output the following info:
# * A list of employees in Department D or E that were paid during the first half of 2004
# * The total amount that each employee with employee ID was paid (regular + overtime)
# * Total numbers of employees that were paid
# * Total regular pay for dept D and E combined
# * Total overtime pay for dept D and E combined
# 
# ****** How to use this program ******
# The program requires -d option and path
# The format is ./payinfo -d directory
#
# * It is ok to use a symlink that points to the correct directory
# * The user needs to have read and execute permissions to the directory
# * This program assumes that the payroll files are readable by the user and that 
# the correctly specified files are available in the directory, the program will generate
# some temp files with a random name stored in the /tmp directory and will be 
# removed when the program exits or 10 days by default
# * This program also assumes that the user has write permissions to the current directory
#
error () {
    # error: output an error message and return
    # the error messages contain the program name
    # and are written to standard error

    local prog=$(basename $0)
    echo -e "$prog:ERROR: $*">&2
}

fatal() {
    # fatal: output an error message and then exit
    # the error() function is used.
    error "$*"
    # if you want to output a message about how to successfully
    # run your program (called a 'usage message'), this would
    # be the place to do it

    # now exit with an error
    exit 1
}

option=$1
dir=$2
[ $# -ne 2 ] && fatal "need two arguments with format payinfo -d path"
[ "$option" != "-d" ] && fatal "need -d option...the format is payinfo -d path"
[ ! -e "$dir" ] && fatal "payroll files doesn't exit at '$dir'"
[ ! -d "$dir" ] && fatal "'$dir' is not a directory"
[ ! -r "$dir" ] && fatal "looks like you do not have read permissions to '$dir'"
[ ! -x "$dir" ] && fatal "looks like you do not have execute permissions to '$dir'"


# create temp payroll
tmppayroll=$(mktemp)
tmperror=$(mktemp)
cat "$dir"/0[1-6][0-3][0-9]04 > "$tmppayroll" 2>"$tmperror"
grep -q "No such file or directory" "$tmperror" && fatal "no payroll files found for first six months of 2004"

# create temp dept
tmpdepts=$(mktemp)
cat "$dir"/[DE]{[[:digit:]][[:digit:]],[[:digit:]][[:digit:]][[:digit:]]} > "$tmpdepts" 2>"$tmperror"
grep -q "No such file or directory" "$tmperror" && fatal "The specified D or E departments are not found"

# list of emp id in the period
tmpemp=$(mktemp)
cut -d'#' -f1 "$tmppayroll" | sort -nu > "$tmpemp"

rpay=0
opay=0
paidemp=0
while read emp; do
    if ! grep -q ":$emp:[[:digit:]]*\." "$tmpdepts"; then
        error "Employee #$emp is not listed in the Department files"
    else
	employee_name=$(grep ":$emp:[[:digit:]]*\." "$tmpdepts" | cut -d':' -f1)
	
	# Regular
	regular_rate=$(grep ":$emp:[0-9]*\." "$tmpdepts" | cut -d: -f4)
	regular_hours=0
	tmpreg=$(mktemp)
	grep "^$emp#" "$tmppayroll" | cut -d'#' -f2 > "$tmpreg"
	while read reghours; do
	    regular_hours=$((regular_hours + reghours))
	done < "$tmpreg"
	regular_pay=$(echo "scale=2; $regular_rate * $regular_hours" | bc)

	# Overtime 
	ot_rate=$(grep ":$emp:[0-9]*\." "$tmpdepts" | cut -d: -f5)
	overtime=0
	tmpot=$(mktemp)
	grep "^$emp#" "$tmppayroll" | cut -d'#' -f3 > "$tmpot"
	while read othours; do
	    overtime=$((overtime + othours))
	done < "$tmpot"
	ot_pay=$(echo "scale=2; $ot_rate * $overtime" | bc)

        echo "Employee #$emp ($employee_name) \$$(echo "scale=2; $regular_pay + $ot_pay" | bc) earned during the period."
	((paidemp++))
	rpay=$(echo "scale=2; $rpay + $regular_pay" | bc)
	opay=$(echo "scale=2; $opay + $ot_pay" | bc)
    fi
done < "$tmpemp"

echo "*************** TOTALS *****************"
echo "Employees with fat wallets: ... $paidemp"
echo "Regular pay: .................. \$$rpay"
echo "Overtime pay: ................. \$$opay"		  

# removing temp files
rm $tmpayroll $tmpdepts $tmpemp $tmpot $tmpreg $tmperror


